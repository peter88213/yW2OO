""" yWriter to OpenOffice conversion tool.

Postprocessor for yWriter html export to make it suitable for 
Open/LibreOffice Writer. It
*   removes several unwanted tags generated by yWriter, 
    such as table and font specification,
*   sets Chapter headings to "Heading 2" and removes the String
    "Chapter",
*   sets Scene headings to "Heading 4",
*   sets the first paragraph of each chapter and scene to "Heading 6"
    (it is assumed that in Writer, default paragraphs will be set to 
    "First-line indent", and "Heading 6" to "Text body" manually or 
    by a macro),
*   converts "italic" and "bold" into "emphasized" and "strong" 
    according to Writer's character styles,
*   converts em-dashes into double hyphens (to be converted into the
    required dashes later on),
*   removes empty paragraphs within scenes.

For further information see https://github.com/peter88213/yW2OO
Published under the MIT License (https://opensource.org/licenses/mit-license.php)
"""
import sys

VERSION = 'v1.12.0'
START_MESSAGE = "\nyW2OO - Structuring yWriter's html export " + VERSION

# HTML_FILE is generated by yWriter.
# Invoking command: "Project > Export Project > to html").
# HTML_FILE is placed in the 'Export' subdirectory of the yWriter
# project directory. This should be the yw2oo working directory.
HTML_FILE = 'Exported Project.html'

DELIMITER = '|'

# Make the html file look good in a web browser.
CSS_HEADER = '''<html>
<head>
<style type='text/css'>
h2, h4, p {font: 1em monospace; margin: 3em; line-height: 1.5em}
p.textbody {margin-top:0; margin-bottom:0}
p.firstlineindent {margin-top:0; margin-bottom:0; text-indent: 1em}
h2 {font-weight: bold}
h2, h4 {text-align: center}
strong {font-weight:normal; text-transform: uppercase}
</style>
</head>
<body>
'''

# Replacements to be made (see search_and_replace()):
# NOTE: Double quotes are required
# because search strings contain single quotes.
htmlReplaceList = [
    "<html><head></head><body>|" + CSS_HEADER + "|",
    "<p align='justify'><i>&nbsp;</i></p>\n<p class='Para'>|<p class='textbody'>|",
    "<br /><br /><br /><center>&nbsp;</center><br /><br />\n\n<p class='Para'>|<h4>* * *</h4>\n<p class='textbody'>|",
    "<br /><br /><br /><center>*</center><br /><br />\n\n<p class='Para'>|<h4>*</h4>\n<p class='textbody'>|",
    "<br /><br /><br /><center>* * *</center><br /><br />\n\n<p class='Para'>|<h4>* * *</h4>\n<p class='textbody'>|",
    "<br /><br /><br /><center>#</center><br /><br />\n\n<p class='Para'>|<h4>#</h4>\n<p class='textbody'>|",
    "<br /><br /><br /><center>-=#=-</center><br /><br />\n\n<p class='Para'>|<h4>-=#=-</h4>\n<p class='textbody'>|",
    "<br /><br /><br /><center>&bull;</center><br /><br />\n\n<p class='Para'>|<h4>&bull;</h4>\n<p class='textbody'>|",
    "<center></center>\n\n<p class='Para'>|<h4>* * *</h4>\n<p class='textbody'>|",
    "<center>&nbsp;</center>\n\n<p class='Para'>|<h4>* * *</h4>\n<p class='textbody'>|",
    "<center>*</center>\n\n<p class='Para'>|<h4>*</h4>\n<p class='textbody'>|",
    "<center>* * *</center>\n\n<p class='Para'>|<h4>* * *</h4>\n<p class='textbody'>|",
    "<center>#</center>\n\n<p class='Para'>|<h4>#</h4>\n<p class='textbody'>|",
    "<center>-=#=-</center>\n\n<p class='Para'>|<h4>-=#=-</h4>\n<p class='textbody'>|",
    "<center>&bull;</center>\n\n<p class='Para'>|<h4>&bull;</h4>\n<p class='textbody'>|",
    "<table align=center border=0 width=790>||",
    "<tr><td>||",
    "<font name='arial' size=+1>||",
    "</font>||",
    "</td></tr></table>||",
    "<p align='justify'><i>&nbsp;</i></p>||",
    "<p class='Para'></p>||",
    "</b></center>|</h2>|",
    "<center><b>|<h2>|",
    "<p class='chapter'>|<h2>|",
    "Chapter ||",
    "<b>|<strong>|",
    "</b>|</strong>|",
    "<i>|<em>|",
    "</i>|</em>|",
    "&mdash;|--|",
    "  | |",
    "  | |",
    "<p class='Para'>|<p class='firstlineindent'>|",
]


def search_and_replace(stringToSearch,  # string to be modified
                       replaceList):  # list of strings containing items to find and replace.
    """ Multiple find and replace text in a string. """
    for line in replaceList:
        if line.count(DELIMITER) == 2:
            replaceItem = line.split(DELIMITER)
            stringToSearch = stringToSearch.replace(
                replaceItem[0], replaceItem[1])
        else:
            return(None)
    return(stringToSearch)


def main():
    """ Clean up and structure yWriter's html export. """
    print(START_MESSAGE)
    try:
        with open(HTML_FILE, 'r') as f:
            htmlData = f.read()
    except IOError:
        print('ERROR: Cannot read "' + HTML_FILE + '"!\n')
        sys.exit(1)

    htmlData = search_and_replace(htmlData, htmlReplaceList)
    assert htmlData != None

    # Make the html file look extra pretty.
    while htmlData.count('\n\n\n'):
        htmlData = htmlData.replace('\n\n\n', '\n\n')

    try:
        with open(HTML_FILE, 'w') as f:
            f.write(htmlData)
    except IOError:
        print('ERROR: Cannot write "' + HTML_FILE + '"!\n')
        sys.exit(1)

    print('"' + HTML_FILE + '" successfully processed.\n')
    return(0)


if __name__ == '__main__':
    main()
